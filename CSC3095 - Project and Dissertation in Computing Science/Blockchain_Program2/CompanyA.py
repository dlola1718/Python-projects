

from web3 import Web3

from flask import Flask, jsonify, request
from flask.helpers import total_seconds
from werkzeug.utils import secure_filename

import pandas as pd
import hashlib



def hash_the_excel(excelFilePath):
    excelFileName = str(excelFilePath)
    #This will read all of the sheets of the excel file
    df = pd.concat(pd.read_excel(excelFileName, sheet_name=None), ignore_index=True)
    df = str(df)

    excelFileHash = hashlib.sha256(df.encode()).hexdigest()
    #print(df)
    #print(excelFileHash)
    return(excelFileHash)


def verifyHashes(hash1,hash2):
    if hash1 == hash2:
        return True
    else:
        return False



# Create an object of Flask 
app = Flask(__name__)
app.config['JSONIFY_PRETTYPRINT_REGULAR'] = False


#Smart Contract related code
# Connects to local Ganche // check if it is connected.  testnet / mainnet api link below
w3 = Web3(Web3.HTTPProvider('http://127.0.0.1:7545'))
print(w3.isConnected())

abi = [
	{
		"constant": 'true',
		"inputs": [
			{
				"name": "fileName",
				"type": "string"
			}
		],
		"name": "retrieve",
		"outputs": [
			{
				"name": "",
				"type": "string"
			}
		],
		"payable": 'false',
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": 'false',
		"inputs": [
			{
				"name": "fileName",
				"type": "string"
			},
			{
				"name": "hashOfFile",
				"type": "string"
			}
		],
		"name": "storeHash",
		"outputs": [],
		"payable": 'false',
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": 'true',
		"inputs": [],
		"name": "showAllFileNames",
		"outputs": [
			{
				"name": "",
				"type": "string[]"
			}
		],
		"payable": 'false',
		"stateMutability": "view",
		"type": "function"
	}
]

# The bytecode is not needed here. But I have kept it here for further experimentation
#bytecode ="6060604052341561000f57600080fd5b61084f8061001e6000396000f300606060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806364cc73271461005c5780636f28ee09146100925780637735a572146100b4575b600080fd5b341561006757600080fd5b61007c6004610077903690610563565b6100dd565b604051610089919061070c565b60405180910390f35b341561009d57600080fd5b6100b260046100ad9036906105a4565b6101f0565b005b34156100bf57600080fd5b6100c76102b0565b6040516100d491906106ea565b60405180910390f35b6100e56103a0565b6000826040518082805190602001908083835b60208310151561011d57805182526020820191506020810190506020830392506100f8565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156101e45780601f106101b9576101008083540402835291602001916101e4565b820191906000526020600020905b8154815290600101906020018083116101c757829003601f168201915b50505050509050919050565b806000836040518082805190602001908083835b6020831015156102295780518252602082019150602081019050602083039250610204565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020908051906020019061026f9291906103b4565b50600180548060010182816102849190610434565b9160005260206000209001600084909190915090805190602001906102aa9291906103b4565b50505050565b6102b8610460565b6001805480602002602001604051908101604052809291908181526020016000905b8282101561039757838290600052602060002090018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103835780601f1061035857610100808354040283529160200191610383565b820191906000526020600020905b81548152906001019060200180831161036657829003601f168201915b5050505050815260200190600101906102da565b50505050905090565b602060405190810160405280600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106103f557805160ff1916838001178555610423565b82800160010185558215610423579182015b82811115610422578251825591602001919060010190610407565b5b5090506104309190610474565b5090565b81548183558181151161045b5781836000526020600020918201910161045a9190610499565b5b505050565b602060405190810160405280600081525090565b61049691905b8082111561049257600081600090555060010161047a565b5090565b90565b6104c291905b808211156104be57600081816104b591906104c5565b5060010161049f565b5090565b90565b50805460018160011615610100020316600290046000825580601f106104eb575061050a565b601f0160209004906000526020600020908101906105099190610474565b5b50565b600082601f830112151561052057600080fd5b813561053361052e8261075b565b61072e565b9150808252602083016020830185838301111561054f57600080fd5b61055a8382846107c2565b50505092915050565b60006020828403121561057557600080fd5b600082013567ffffffffffffffff81111561058f57600080fd5b61059b8482850161050d565b91505092915050565b600080604083850312156105b757600080fd5b600083013567ffffffffffffffff8111156105d157600080fd5b6105dd8582860161050d565b925050602083013567ffffffffffffffff8111156105fa57600080fd5b6106068582860161050d565b9150509250929050565b600061061b82610794565b8084526020840193508360208202850161063485610787565b60005b8481101561066d57838303885261064f8383516106b4565b925061065a826107b5565b9150602088019750600181019050610637565b508196508694505050505092915050565b6000610689826107aa565b80845261069d8160208601602086016107d1565b6106a681610804565b602085010191505092915050565b60006106bf8261079f565b8084526106d38160208601602086016107d1565b6106dc81610804565b602085010191505092915050565b600060208201905081810360008301526107048184610610565b905092915050565b60006020820190508181036000830152610726818461067e565b905092915050565b6000604051905081810181811067ffffffffffffffff8211171561075157600080fd5b8060405250919050565b600067ffffffffffffffff82111561077257600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b82818337600083830152505050565b60005b838110156107ef5780820151818401526020810190506107d4565b838111156107fe576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a723058203b58040971e028d66e7463b532c82578ffd59b699f423afa86302ee0a1b7f81e6c6578706572696d656e74616cf50037"


# Reading the contract address from the txt file. It is saved in text file so that every file gets the same contract address.
f = open("contractAddress.txt", "r")
contract_address = f.read()


# Use the deployed_contract to access functions of the smart contract
deployed_contract = w3.eth.contract(address=contract_address, abi=abi)



companyEthAccount = w3.eth.accounts[1]

#To Upload the hash of the file to Blockchain
def uploadFileHashToBC(fileName):
    deployed_contract.functions.storeHash(fileName,hash_the_excel(fileName)).transact({'from':companyEthAccount})


# To check all files stored on the chain
def showBCFileNames():
    result = deployed_contract.functions.showAllFileNames().call()
    return result

def retrieveFileHashFromBC(fileName):
    result = deployed_contract.functions.retrieve(fileName).call()
    return result



@app.route('/sendFile', methods = ['POST'])
def sendFile():
    if request.method == 'POST':
        f = request.files['file']
        f.save(secure_filename('1'+f.filename))

		# The excel file is received here
        print('Name of received File: ',f.filename)
        
        receivedFileHash = hash_the_excel(f.filename)
        fileHashOnBC = retrieveFileHashFromBC(f.filename)
        print('File Hash calculated locally: ',receivedFileHash)
        print('File Hash received from Blockchain: ',fileHashOnBC)

		# Comparing the hashes to verify the data integrity
        if verifyHashes(receivedFileHash,fileHashOnBC):
            print('The file is verified against the hash value on the Blockchain')
        else:
            print('Verification Failed')

        return 'file uploaded successfully'
    


app.run(host='0.0.0.0', port=5000)
